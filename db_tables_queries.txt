CREATE TABLE Roles (
    role_id SERIAL PRIMARY KEY,
    role_name VARCHAR(50) UNIQUE NOT NULL,
    description TEXT
);

CREATE TABLE Permissions (
    permission_id SERIAL PRIMARY KEY,
    permission_name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT
);


CREATE TABLE RolePermissions (  
    role_id INT REFERENCES roles(role_id) ON DELETE CASCADE,
    permission_id INT REFERENCES permissions(permission_id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, permission_id)
);


CREATE TABLE Users (
    user_id SERIAL PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    phone_number VARCHAR(20),
    donor_type VARCHAR(20) CHECK (donor_type IN ('INDIVIDUAL', 'ORGANIZATION')),
    role_id INT REFERENCES roles(role_id),
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'suspended')),
    address_province VARCHAR(100)
    address_city_municipality VARCHAR(100)
    address_barangay VARCHAR(100)
    address_street TEXT
    parish VARCHAR(255)
    vicariate VARCHAR(255)
    zip_code VARCHAR(10)
    email_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    -- Profile Information
    profile_picture_url TEXT,
    bio TEXT,
    -- Security
    password_reset_token VARCHAR(255),
    password_reset_expires TIMESTAMP,
    login_attempts INTEGER DEFAULT 0,
    locked_until TIMESTAMP
);


CREATE TABLE Vicariates (

)

CREATE TABLE Parishes (
    
)

CREATE TABLE UserActivityLogs (
    log_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES Users(user_id) ON DELETE CASCADE,
    -- What happened
    action VARCHAR(100) NOT NULL, -- 'login', 'logout', 'donation_submitted', 'profile_updated', etc.
    description TEXT NOT NULL, -- Human readable description
    -- When it happened
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Donations (
    donation_id SERIAL PRIMARY KEY, 

)

CREATE TABLE DonatedItems (
    donated_items_id SERIAL PRIMARY KEY,
    item_type ,
    item_name ,
    item_Category ,
    item_quantity , 
    item_estvalue ,
    delivery_method
    
)

CREATE TABLE Distributions (

);

CREATE TABLE DistributedItems ();

CREATE TABLE Beneficiary ();

CREATE TABLE DonationInventory ();

CREATE TABLE BazaarInventory ();

CREATE TABLE Schedules (

);

CREATE TABLE ItemType (
    itemtype_id SERIAL PRIMARY KEY,
    item_types VARCHAR(255)
)

CREATE TABLE ItemTypeCategory (
    category_id SERIAL PRIMARY KEY,
    categorY_name VARCHAR(255)
)

CREATE TABLE ItemReferenceValues (
    itemrefval_id SERIAL PRIMARY KEY,
    reference_values DECIMAL
)

CREATE TABLE Notifications ()



-- Indexes for better performance
CREATE INDEX idx_users_email ON Users(email);
CREATE INDEX idx_users_role ON Users(role);
CREATE INDEX idx_users_status ON Users(status);
CREATE INDEX idx_users_created_at ON Users(created_at);
CREATE INDEX idx_users_last_login ON Users(last_login);
CREATE INDEX idx_users_city ON Users(city);
CREATE INDEX idx_users_parish ON Users(parish);

-- Function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to automatically update updated_at field
CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON Users 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Simple indexes for UserActivityLogs
CREATE INDEX idx_activity_logs_user_id ON UserActivityLogs(user_id);
CREATE INDEX idx_activity_logs_action ON UserActivityLogs(action);
CREATE INDEX idx_activity_logs_created_at ON UserActivityLogs(created_at);